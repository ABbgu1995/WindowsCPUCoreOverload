#include <stdio.h>
#include <math.h>
#include <windows.h>
#include <process.h>
#include <time.h>

// 13
#define NUM_ITERATIONS 1000000
#define NUM_CORES 25
// Use an event object for signaling threads to exit
HANDLE exitEvent;

// Function to generate a random number
int generate_random_number(int min, int max) {
    return rand() % (max - min + 1) + min;
}

// Function to simulate CPU-intensive task
void consume_cpu() {
    while (WaitForSingleObject(exitEvent, 0) == WAIT_TIMEOUT) {
        double result = 0;

        int random_number2 = generate_random_number(999999, 999999999);
        int random_number3 = generate_random_number(999999, 99999999999);

        //2147483647
        //99999999999
        for (int i = 0; i < 99999; i++) {
            result += log((double)random_number2) * pow(i, 2)* log((double)random_number3);
        }
    }
}

// Function to wrap the function pointer for _beginthread
void wrapper_function(void* func_ptr) {
    void (*func)(void) = func_ptr;
    func();
}

int main() {
    srand((unsigned int)time(NULL));

    exitEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

    for (int i = 1; i < NUM_ITERATIONS; i++) {
        HANDLE threads[NUM_CORES];

        // Measure time before starting threads (Line 1)
        DWORD start_time = GetTickCount();

        // Line 1
        for (int core = 0; core < NUM_CORES; core++) {
            threads[core] = (HANDLE)_beginthread(wrapper_function, 0, consume_cpu);
        }

//
//        O:0.8 S:1 N:50V
//        O:0.8 S:1.5 N:50V
//        O:0.8 S:0.8 N:50V


//        O:0.7 S:0.7 N:50
//        O:0.5 S:0.5 N:50
//        O:0.3 S:0.3 N:50
//        O:0.1 S:0.1 N:50
//        O:0.9 S:2 N:50V
//        O:4 S:4 N:50
//        O:0.7 S:0.7 N:50

        // Line 2
        Sleep(0.1);


        // Measure time after starting threads (Line 2)

        // Line 3
        SetEvent(exitEvent);

        // Line 4

        WaitForMultipleObjects(NUM_CORES, threads, TRUE, INFINITE);

        for (int core = 0; core < NUM_CORES; core++) {
            CloseHandle(threads[core]);
        }

        // Line 5
        Sleep(0.1);

        ResetEvent(exitEvent);
    }

    CloseHandle(exitEvent);

    return 0;
}
//void consume_cpu() {
//    while (WaitForSingleObject(exitEvent, 0) == WAIT_TIMEOUT) {
//        double result = 0;
//
//        int random_number1 = generate_random_number(999999, 999999999);
//        int random_number2 = generate_random_number(999999, 999999999);
//        int random_number3 = generate_random_number(999999, 9999999999999);
//
//        for (int i = 0; i < 9999; i++) {
//            result += log((double)random_number2) * pow(i, 2)* log((double)random_number3);
//        }
//    }



#include <stdio.h>
#include <math.h>
#include <windows.h>
#include <process.h>
#include <time.h>
#include <timeapi.h>

#define NUM_CORES 12
#define NUM_ITERATIONS 50

volatile LONG pendingJobs = 0;
volatile int stop_threads = 0;
HANDLE logMutex; // Mutex for log file access
HANDLE threads[NUM_CORES]; // Array to store thread handles

// Function to generate a random number
int generate_random_number(int min, int max) {
    return rand() % (max - min + 1) + min;
}

// High-resolution timestamp function
unsigned long long GetHighResolutionTimestamp() {
    LARGE_INTEGER freq, counter;
    QueryPerformanceFrequency(&freq);
    QueryPerformanceCounter(&counter);
    return (unsigned long long)(counter.QuadPart * 1000.0 / freq.QuadPart);
}

void PreciseSleep(long long milliseconds) {
    unsigned long long endTime = GetHighResolutionTimestamp() + milliseconds;
    while (GetHighResolutionTimestamp() < endTime) {
        // Optionally, use a short Sleep here to yield the processor
        Sleep(1); // Sleep for 1 ms to reduce CPU usage during the wait
    }
}

void HybridSleep(long long milliseconds) {
    unsigned long long start = GetHighResolutionTimestamp();
    unsigned long long end = start + milliseconds;
    unsigned long long now = start;

    // First, use Sleep to wait for the majority of the wait time, but wake up slightly earlier.
    long long earlyWakeTime = milliseconds - 1; // Wake up 1 ms early
    if (earlyWakeTime > 0) {
        Sleep((DWORD)earlyWakeTime);
    }

    // Then, use a busy-wait loop for the final milliseconds to achieve higher precision.
    do {
        now = GetHighResolutionTimestamp();
    } while (now < end);
}
// Thread-safe logging function
void LogToFile(const char* logMessage) {
    WaitForSingleObject(logMutex, INFINITE);

    FILE* logFile = fopen("C:\\Users\\user\\CLionProjects\\CPU_Overloader\\thread_log.txt", "a");
    if (logFile != NULL) {
        fprintf(logFile, "%s\n", logMessage);
        fclose(logFile);
    }

    ReleaseMutex(logMutex);
}

// Callback function for thread pool work items
VOID CALLBACK MyWorkCallback(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work) {
UNREFERENCED_PARAMETER(Instance);
UNREFERENCED_PARAMETER(Context);
UNREFERENCED_PARAMETER(Work);
double result = 0;

unsigned long long startTime = GetHighResolutionTimestamp();
DWORD processorNumber = GetCurrentProcessorNumber();

// Simulate work with precise timing
unsigned long long targetTime = 5; // Target time in milliseconds
unsigned long long endTime = startTime + targetTime;
unsigned long long currentTime;
do {
currentTime = GetHighResolutionTimestamp();
for (int i = 0; i < 999; i++) {
result += log((double)i) * pow(i, 2);
}
} while (currentTime < endTime && !stop_threads);

unsigned long long actualTime = GetHighResolutionTimestamp() - startTime;
char logBuffer[128];
snprintf(logBuffer, sizeof(logBuffer), "Thread finished in %llu ms on processor %lu", actualTime, processorNumber);
LogToFile(logBuffer);

// Decrement the count of pending jobs
InterlockedDecrement(&pendingJobs);
}


// Thread function for manual thread management
unsigned __stdcall ThreadFunction(void* pContext) {
    int coreIndex = *((int*)pContext); // Determine the core index
    DWORD_PTR affinityMask = (DWORD_PTR)1 << coreIndex;
    SetThreadAffinityMask(GetCurrentThread(), affinityMask); // Set affinity to the specified core

    MyWorkCallback(NULL, NULL, NULL); // Call the original callback function

    return 0;
}

int main() {
    timeBeginPeriod(1);

    srand((unsigned int)time(NULL));

    if (!SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS)) {
        printf("Failed to set process priority. Error: %lu\n", GetLastError());
        return -1;
    }
    // Initialize log mutex
    logMutex = CreateMutex(NULL, FALSE, NULL);
    if (logMutex == NULL) {
        printf("Failed to create log mutex.\n");
        return -1;
    }

    TP_CALLBACK_ENVIRON CallBackEnviron;
    InitializeThreadpoolEnvironment(&CallBackEnviron);
    SetThreadpoolCallbackRunsLong(&CallBackEnviron);
    // Create a thread pool
    PTP_POOL pool = CreateThreadpool(NULL);
    if (!pool) {
        printf("Failed to create thread pool.\n");
        return -1;
    }
    SetThreadpoolThreadMaximum(pool, NUM_CORES);
    if (!SetThreadpoolThreadMinimum(pool, NUM_CORES)) {
        printf("Failed to set the minimum thread count.\n");
        CloseThreadpool(pool);
        return -1;
    }

    int coreIndices[NUM_CORES]; // Array to store core indices for passing to threads

    for (int iteration = 0; iteration < NUM_ITERATIONS; iteration++) {
        char iterationStartMsg[128];
        unsigned long long iterationStartTime = GetHighResolutionTimestamp();
        snprintf(iterationStartMsg, sizeof(iterationStartMsg), "Iteration %d started at %llu ms", iteration + 1, iterationStartTime);
        LogToFile(iterationStartMsg);
        stop_threads = 0; // Ensure threads are running for the new iteration
        pendingJobs = NUM_CORES; // Set pending jobs to the number of cores

        // Create threads and set their affinity
        for (int i = 0; i < NUM_CORES; i++) {
            coreIndices[i] = i; // Assign core index
            threads[i] = (HANDLE)_beginthreadex(NULL, 0, ThreadFunction, &coreIndices[i], 0, NULL);
            if (threads[i] == NULL) {
                printf("Failed to create thread for core %d.\n", i);
                // Cleanup and exit if thread creation fails
                for (int j = 0; j < i; j++) {
                    if (threads[j] != NULL) {
                        CloseHandle(threads[j]);
                    }
                }
                return -1;
            }
        }

        // Simulate work
        Sleep(5);

        // Signal threads to stop
        stop_threads = 1;

        // Wait for all threads to complete
        WaitForMultipleObjects(NUM_CORES, threads, TRUE, INFINITE);

        // Reset stop_threads for the next iteration
        stop_threads = 0;

        // Close thread handles
        for (int i = 0; i < NUM_CORES; i++) {
            CloseHandle(threads[i]);
        }
    }

    CloseThreadpool(pool);
    printf("All work items have completed across %d iterations.\n", NUM_ITERATIONS);
    CloseHandle(logMutex);
    timeEndPeriod(1);
    return 0;
}
